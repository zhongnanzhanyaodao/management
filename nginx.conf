#user  nobody;

#启动进程,通常设置成和cpu的数量相等
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#工作模式及连接数设置
events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;


	#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    #对于普通应用，必须设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
	#连接超时时间
    keepalive_timeout  65;

    #gzip  on;

	#max_fails=number
    #设定Nginx与服务器通信的尝试失败的次数。在fail_timeout参数定义的时间段内，如果失败的次数达到此值，Nginx就认为服务器不可用。在下一个fail_timeout时间段，服务器不会再被尝试。 #失败的尝试次数默认是1。设为0就会停止统计尝试次数，认为服务器是一直可用的。 #默认配置时，http_404状态不被认为是失败的尝试。
	#fail_timeout=time
    #设定
        #统计失败尝试次数的时间段。在这段时间中，服务器失败次数达到指定的尝试次数，服务器就被认为不可用。
        #服务器被认为不可用的时间段。
    #默认情况下，该超时时间是10秒。
	upstream myyun {
		server 39.108.209.178:8066 max_fails=2 fail_timeout=30s;
		server 47.52.201.211:8066 max_fails=2 fail_timeout=30s;
	}


    server {
        listen       8081;
        server_name  localhost;

        charset utf-8;

		#http://myyun 末尾无/ 则会把/management拼接到myyun upstream后,即完整地址为 http://myyun/management/...
		location /management {
			proxy_pass http://myyun;
		}
		#http://www.baidu.com/ 末尾有/ 则不会把/testmanagement/拼接到proxy_pass的地址后,即完整地址为 http://www.baidu.com/...
		location /testmanagement/ {
			proxy_pass http://www.baidu.com/;
		}





        #access_log  logs/host.access.log  main;

		#默认请求，定义首页索引文件的名称
		#当用户请求 / 地址时，Nginx 就会自动在 root 配置指令指定的文件系统目录下依次寻找 index.html 和 index.htm 这两个文件。如果 index.html 文件存在，则直接发起“内部跳转”到 /index.html 这个新的地址；而如果 index.html #文件不存在，则继续检查 index.htm 是否存在。如果存在，同样发起“内部跳转”到 /index.htm；如果 index.htm 文件仍然不存在，则放弃处理权给 content 阶段的下一个模块。
        location / {
            root   /data/webapps/front-management/html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;
        location = /404.html {
            root   /data/webapps/front-management/html;
            index   my404.html;
        }

        # redirect server error pages to the static page /50x.html
        # 将服务器错误页面跳转到静态页面
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /data/webapps/front-management/html;
            index   my50x.html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
