类装载器就是寻找类的字节码文件并构造出类在JVM内部表示的对象组件。
在JAVA中java虚拟机把一个类装入到java虚拟机当中需要经过以下的步骤：
1.装载：查找和导入Class文件
2.链接：执行校验，准备和解析步骤，其中解析步骤是可选的。
(1)校验:检查载入class文件数据的正确性
(2)准备:给类的静态变量来分配存储空间
(3)解析:将符号引用来转变成直接引用
3.初始化：对类的静态变量、静态代码块执行初始化工作
类转载工作由ClassLoader及其子类负责，ClassLoader是一个重要的Java运行时系统组件，它负责在运行时查找和装入Class字节码文件。

JVM在运行时会产生三个ClassLoader：根装载器、ExtClassLoader（扩展类装载器）和AppClassLoader（应用类装载器）。
根装载器：不是ClassLoader的子类，由于他是使用C++来编写的，因此在JAVA中看不到他。根装载器来复制装载jre的核心类库，如jre目标下的rt.jar、charsets.jar等。
ExtClassLoader：是ClassLoader的子类，负责装载jre扩展目录ext中的jar类包
AppClassLoader:是ClassLoader的子类，负责装载classpath路径下的类
这三个装载器之间存在着父子层级的关系：(注意：ExtClassLoader和AppClassLoader类不是继承和被继承关系)
根装载器是ExtClassLoader的父装载器，而ExtClassLoader是AppClassLoader的父装载器。
在默认情况下使用AppClassLoader装载应用程序的类。

测试代码：
public static void main(String[] args) {
      ClassLoader loader = Thread.currentThread().getContextClassLoader();
      System.out.println("current loader:"+loader);//打印当前类装载器的信息
      System.out.println("parent loader:"+loader.getParent());//打印当前类装载器的父类
      System.out.println("grandparent loader:"+loader.getParent().getParent());//打印当前类装载器的祖父，即根加载器

}
打印：
current loader:sun.misc.Launcher$AppClassLoader@18b4aac2
parent loader:sun.misc.Launcher$ExtClassLoader@5ae9a829
//注意：根装载器在JAVA中访问不到,所有返回null
grandparent loader:null

JVM装载类时使用全盘负责委托机制
全盘负责：当一个ClassLoader如A ClassLoader装载一个类的时候，除非显式的使用另一个ClassLoader如B ClassLoader，否则该类所依赖即引用的类也由这个A ClassLoader来载入。
委托机制：先委托父装载器寻找目标类，只有在找不到的情况下才从自己的类路径中查找并装载目标类。这一点是从安全角度来考虑的。

类文件被装载并解析之后，在JVM内将拥有一个对应的java.lang.class类描述对象。
该类的实例都拥有指向这个类描述对象的引用。而类描述对象又拥有指向关联ClassLoader的引用。
每一个类在JVM中都拥有一个对应的java.lang.Class对象,它提供了类结构信息的描述。
数组、枚举、注解以及基本的java类型（如int，double等），甚至void都拥有对应的Class对象。
Class没有public的构造方法。
Class对象是在装载类时由JVM通过调用类装载器中的defineClass方法来自动构造的。

参考：《精通spring4.x企业应用开发实战》

